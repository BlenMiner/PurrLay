name: rebuild-purr-balancer

on:
  push:
    branches: ['main']
    paths: ['PurrBalancer/**']
  workflow_dispatch:

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Executing remote SSH commands using password
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: 159.69.180.67
          username: root
          key: ${{ secrets.SSH_KEY }}
          port: 22
          script: |
            # Define variables
            SERVICE_NAME="PurrBalancer"
            DOMAIN="purrbalancer.riten.dev"
            REPO_DIR="PurrLay"

            # Update and install dependencies
            apt-get update
            apt-get install -y dotnet-sdk-8.0 certbot

            # Restart Certbot timer to ensure renewal works
            systemctl restart certbot.timer
            
            # Debugging: Check DOMAIN value
            echo "Using DOMAIN: $DOMAIN"
            
            # Configure certificate paths
            CERT_DIR="/etc/letsencrypt/live/$DOMAIN"
            KEY_DIR="/etc/letsencrypt/live/$DOMAIN"
            
            # Obtain a Let's Encrypt SSL certificate
            if [ ! -d "$CERT_DIR" ]; then
              echo "Generating Let's Encrypt certificate..."
              certbot certonly --standalone -d $DOMAIN --non-interactive --no-eff-email --agree-tos -m valentin@riten.dev
              if [ $? -ne 0 ]; then
                echo "Certbot failed! Check logs for details."
                exit 1
              fi
            else
              echo "Skipping renewal; Certbot will auto-renew via its systemd timer."
            fi
            
            # Set certificate permissions
            chmod 644 "$CERT_DIR/fullchain.pem"
            chmod 600 "$CERT_DIR/privkey.pem"

            # Stop existing service
            sudo killall -9 $SERVICE_NAME || true
            if pgrep -x "$SERVICE_NAME" > /dev/null; then
                echo "Failed to stop existing service!"
                exit 1
            fi
            
            # Delete the repository directory if it exists
            if [ -d "$REPO_DIR" ]; then
              echo "Deleting existing repository directory: $REPO_DIR"
            rm -rf $REPO_DIR
            fi
            
            # Clone the repository
            git config --global user.name "GitHub Actions"
            git config --global credential.helper store
            echo "https://${{ secrets.GITHUB_TOKEN }}:@github.com" > ~/.git-credentials
            
            echo "Cloning the repository..."
            git clone --depth=1 https://${{ github.repository_owner }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} $REPO_DIR
            cd $REPO_DIR
            
            # Build the project
            cd $SERVICE_NAME
            dotnet build --property:Configuration=Release
            
            # Start the application with HTTPS
            CERT_PATH="$CERT_DIR/fullchain.pem"
            KEY_PATH="$CERT_DIR/privkey.pem"
            echo "Starting $SERVICE_NAME with HTTPS..."
            sudo nohup ./bin/Release/net8.0/$SERVICE_NAME \
              --urls "http://*:8080;https://*:8443" \
              --cert "$CERT_PATH" \
              --key "$KEY_PATH" > /dev/null 2>&1 &
